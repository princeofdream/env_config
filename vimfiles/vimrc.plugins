" Pathogen or Vundle (deafult is Vundle) {{{

" Comment-out if you want to use pahogen
" execute pathogen#infect()
" com! -nargs=+ Bundle

" man.vim: invoked by :Man {name}
source $VIMRUNTIME/ftplugin/man.vim

" let Vundle manage Vundle, required
" ---------------------------------------------------
Plugin 'gmarik/Vundle.vim'

"}}}

" general plugins {{{


" " DISABLE: minibufexpl makes Vim editing slow when there are too many buffers opened
" "          if you don't mind, and love this plugin, uncomment the script below
" "          to enable it
" " ex-minibufexpl
" " ---------------------------------------------------
" Plugin 'fholgado/minibufexpl.vim'
" " let g:miniBufExplBuffersNeeded = 0
" " let g:miniBufExplUseSingleClick = 1 " If you would like to single click on tabs rather than double clicking on them to goto the selected buffer.
" let g:miniBufExplMaxSize = 1 " <max lines: default 0> setting this to 0 will mean the window gets as big as needed to fit all your buffers.
" let g:miniBufExplTabWrap = 1
" " " let g:miniBufExplDebugMode  = 3
" " " let g:miniBufExplDebugLevel = 0
" let g:miniBufExplMapWindowNavVim = 1
" let g:miniBufExplMapWindowNavArrows = 1
" let g:miniBufExplMapCTabSwitchBufs = 1
" let g:miniBufExplModSelTarget = 1

" " DISABLE: vim-airline makes Vim editing slow when there are too many buffers opened
" "          if you don't mind, and love this plugin, uncomment the script below
" "          to enable it
" " vim-airline
" " ---------------------------------------------------
" " Plugin 'bling/vim-airline'

" " if has('gui_running')
" "     let g:airline_powerline_fonts = 1
" " else
" "     let g:airline_powerline_fonts = 0
" " endif

" " let g:airline#extensions#tabline#enabled = 0 " NOTE: When you open lots of buffers and typing text, it is so slow.
" " let g:airline#extensions#tabline#show_buffers = 1
" " let g:airline#extensions#tabline#buffer_nr_show = 1
" " let g:airline#extensions#tabline#fnamemod = ':t'
" " " let g:airline_section_b = "%{fnamemodify(bufname('%'),':p:.:h').'/'}"
" " " let g:airline_section_c = '%t'
" " " let g:airline_section_warning = airline#section#create(['whitespace']) " NOTE: airline#section#create has no effect in .vimrc initialize pahse
" " " let g:airline_section_warning = '%{airline#util#wrap(airline#extensions#whitespace#check(),0)}'
" let g:airline_section_warning = ''



" ctrlp: invoke by <ctrl-p>
Plugin 'kien/ctrlp.vim'
let g:ctrlp_working_path_mode = ''
let g:ctrlp_match_window = 'bottom,order:ttb,min:1,max:10,results:10'
let g:ctrlp_follow_symlinks = 2
let g:ctrlp_max_files = 0 " Unset cap of 10,000 files so we find everything
nnoremap <unique> <leader>bf :CtrlPBuffer<CR>

" vim-fugitive: invoke most by :Gdiff
" ---------------------------------------------------
Plugin 'tpope/vim-fugitive'

" vim-surround: invoke when you select words and press 's'
" ---------------------------------------------------
Plugin 'tpope/vim-surround'

xmap s <Plug>VSurround

" DISABLE
" " Plugin 'tpope/vim-dispatch'
" " ---------------------------------------------------

" nerdtree: invoke by :NERDTreeToggle
" ---------------------------------------------------
Plugin 'scrooloose/nerdtree'

let g:NERDTreeWinSize = 30
let g:NERDTreeMouseMode = 1
let g:NERDTreeMapToggleZoom = '<Space>'

" nerdcommenter: invoke by <leader>c<space>, <leader>cl, <leader>cu, <F11> or <F12>
" ---------------------------------------------------
Plugin 'scrooloose/nerdcommenter'

let g:NERDSpaceDelims = 1
let g:NERDRemoveExtraSpaces = 1
let g:NERDCustomDelimiters = {
            \ 'vimentry': { 'left': '--' },
            \ }
map <unique> <F11> <Plug>NERDCommenterAlignBoth
map <unique> <F12> <Plug>NERDCommenterUncomment

" syntastic: invoke when you save file and have syntac-checker
" ---------------------------------------------------
Plugin 'scrooloose/syntastic'

" this will make html file by Angular.js ignore errors
let g:syntastic_html_tidy_ignore_errors=[" proprietary attribute \"ng-"]
let g:syntastic_javascript_checkers = ['eslint']

" DISABLE: use ex-autocomplpop instead
" " neocomplcache: invoke when you insert words
" Plugin 'Shougo/neocomplcache.vim'
" " ---------------------------------------------------

" let g:neocomplcache_enable_at_startup = 1
" let g:neocomplcache_auto_completion_start_length = 2
" let g:neocomplcache_enable_smart_case = 1
" let g:neocomplcache_enable_auto_select = 1 " let neocomplcache's completion behavior like AutoComplPop
" " let g:neocomplcache_disable_auto_complete = 1 " Enable this if you like TAB for complete
" " inoremap <C-p> <C-x><C-u>
" " inoremap <expr><TAB>  pumvisible() ? '\<Down>' : '<TAB>'
" " inoremap <expr><S-TAB>  pumvisible() ? '\<Up>' : ''

" DISABLE: use ex-autocomplpop instead
" " neocomplete: invoke when you insert words
" Plugin 'Shougo/neocomplete.vim'
" " ---------------------------------------------------

" let g:neocomplete#enable_at_startup = 1
" let g:neocomplete#enable_smart_case = 1
" let g:neocomplete#enable_auto_select = 1 " let neocomplete's completion behavior like AutoComplPop
" " Enable omni completion.
" autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
" autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
" autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
" autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
" autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags

" DISABLE: use ex-autocomplpop instead
" " YouCompleteMe
" Plugin 'Valloric/YouCompleteMe'
" " ---------------------------------------------------

" TODO: choose a snippet plugin
" Plugin 'Shougo/neosnippet-snippets'
" Plugin 'honza/vim-snippets.git'
" Plugin 'Shougo/neosnippet.vim'
" " ---------------------------------------------------

" Plugin 'msanders/snipmate.vim'
" " ---------------------------------------------------

Plugin 'MarcWeber/vim-addon-mw-utils'
Plugin 'tomtom/tlib_vim'
Plugin 'garbas/vim-snipmate'
Plugin 'honza/vim-snippets'
" " ---------------------------------------------------

" Plugin 'spf13/snipmate-snippets'
" " ---------------------------------------------------

" undotree: invoke by <Leader>u
" ---------------------------------------------------
Plugin 'mbbill/undotree'

nnoremap <leader>u :UndotreeToggle<CR>
nnoremap <F6> :UndotreeToggle<CR>

let g:undotree_SetFocusWhenToggle=1
let g:undotree_WindowLayout = 4

" NOTE: this will prevent undotree closed then jump to minibufexpl
function! g:CloseUndotree()
    call UndotreeHide()
    call ex#window#goto_edit_window()
endfunction

function g:Undotree_CustomMap()
    if has('gui_running')
        nnoremap <silent> <script> <buffer> <ESC> :call g:CloseUndotree()<CR>
    else
        nnoremap <silent> <script> <buffer> <leader><ESC> :call g:CloseUndotree()<CR>
    endif
endfunction

" tabular: invoke by <leader>= alignment-character
" ---------------------------------------------------
Plugin 'godlygeek/tabular'

nnoremap <silent> <leader>= :call g:Tabular(1)<CR>
xnoremap <silent> <leader>= :call g:Tabular(0)<CR>
function! g:Tabular(ignore_range) range
    let c = getchar()
    let c = nr2char(c)
    if a:ignore_range == 0
        exec printf('%d,%dTabularize /%s', a:firstline, a:lastline, c)
    else
        exec printf('Tabularize /%s', c)
    endif
endfunction

" vim-easymotion: invoke by <leader><leader> w,b,e,ge,f,F,h,i,j,k,/
" ---------------------------------------------------
Plugin 'Lokaltog/vim-easymotion'

map <leader><leader>/ <Plug>(easymotion-sn)
omap <leader><leader>/ <Plug>(easymotion-tn)
map <leader><leader>j <Plug>(easymotion-j)
map <leader><leader>k <Plug>(easymotion-k)
map <leader><leader>l <Plug>(easymotion-lineforward)
map <leader><leader>h <Plug>(easymotion-linebackward)
let g:EasyMotion_startofline = 0 " keep cursor colum when JK motion

" LargeFile
" ---------------------------------------------------
Plugin 'vim-scripts/LargeFile'
let g:LargeFile= 20 " files >= 5MB will use LargeFile rules

"}}}

" DISABLE: I'm using GistBox https://app.gistboxapp.com/ instead
" " gist-vim: Invoke by :Gist
" ---------------------------------------------------
" Plugin 'mattn/webapi-vim'
" Plugin 'mattn/gist-vim'

" c-lang {{{

" ex-cref: invoke by <leader>cr
" ---------------------------------------------------
" Plugin 'exvim/ex-cref'

" " this is modified for default c syntax highlight settings
" " make it don't highlight error pattern
" let c_gnu = 1
" let c_no_curly_error = 1
" let c_no_bracket_error = 1

"}}}

" web {{{

Plugin 'ntpeters/vim-better-whitespace'
nnoremap <unique> <leader>w :StripWhitespace<CR>

" emmet-vim
" ---------------------------------------------------
Plugin 'mattn/emmet-vim'

" make sure emmet only enable in html,css files
let g:user_emmet_install_global = 0
autocmd FileType html,css EmmetInstall

" DISABLE:
" " vim-indent-guides: invoke by <leader>ig
" " ---------------------------------------------------
Plugin 'nathanaelkane/vim-indent-guides'
"{{{
let g:indent_guides_guide_size = 1
" let g:indent_guides_start_level = 1
let g:indent_guides_auto_colors = 0
" let g:indent_guides_space_guides = 0
let g:indent_guides_soft_pattern = ' '
let g:indent_guides_enable_on_vim_startup = 1
autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd  guibg=#282828   ctermbg=234
autocmd VimEnter,Colorscheme * :hi IndentGuidesEven guibg=#363636	ctermbg=237

" hi IndentGuidesOdd  guibg=red   ctermbg=3
" hi IndentGuidesEven guibg=green ctermbg=4
" hi IndentGuidesOdd  ctermbg=black
" hi IndentGuidesEven ctermbg=darkgrey
" hi IndentGuidesOdd  ctermbg=white
" hi IndentGuidesEven ctermbg=lightgrey
"}}}

" Yggdroot/indentLine: invoke by <leader>ig
" ---------------------------------------------------

Plugin 'Yggdroot/indentLine'
nnoremap <unique> <leader>ih :IndentLinesToggle<CR>
let g:indentLine_showFirstIndentLevel = 1
let g:indentLine_enabled = 0

" vim-javascript
" ---------------------------------------------------
Plugin 'pangloss/vim-javascript'

" vim-coffee-script
" ---------------------------------------------------
Plugin 'kchmck/vim-coffee-script'

" DISABLE: Slow to open big css file
" vim-css-color
" ---------------------------------------------------
" Plugin 'skammer/vim-css-color'

" vim-css3-syntax
Plugin 'hail2u/vim-css3-syntax'

" vim-jade
Plugin 'digitaltoad/vim-jade'

" vim-less
" ---------------------------------------------------
Plugin 'groenewege/vim-less'

" vim-stylus
" ---------------------------------------------------
Plugin 'wavded/vim-stylus'

" vim-markdown
" ---------------------------------------------------
" Plugin 'plasticboy/vim-markdown'

" let g:vim_markdown_initial_foldlevel=9999

" YourCompleteMe
" ---------------------------------------------------
" Plugin 'Valloric/YouCompleteMe'
" Plugin 'Rip-Rip/clang_complete'
" let g:clang_complete_copen=0
" " let g:clang_periodic_quickfix=1
" " let g:clang_snippets=1
" " let g:clang_close_preview=1
" let g:clang_use_library=1
" " let g:clang_user_options='-stdlib=libc++ -std=c++11 -IIncludePath'
" " let g:clang_library_path='/usr/local/lib'
" " let g:clang_library_path='/usr/lib/llvm-3.8/lib'
" let g:clang_library_path='/home/lijin/Environment/env_rootfs/lib/'
" let g:clang_hl_errors=1

" Plugin 'vim-fuzzyfinder'
map ff :FufFile<cr>
map fb :FufBuffer<cr>

Plugin 'ggreer/the_silver_searcher'

" Plugin 'mileszs/ack.vim'
Plugin 'beyondgrep/ack2'
Plugin 'rking/ag.vim'

" let g:ackprg = 'ag --nogroup --nocolor --column'
let g:ackprg = 'ag --vimgrep'

Plugin 'sjl/gundo.vim'
nnoremap <F5> :GundoToggle<CR>

Plugin 'dyng/ctrlsf.vim'
nnoremap <F7> :CtrlSFToggle<CR>


set completeopt=longest,menuone,preview
" set completeopt=menu,longest

" Plugin 'vim-airline/vim-airline'
" let g:airline#extensions#tabline#enabled = 1
" let g:airline#extensions#tabline#left_sep = ' '
" let g:airline#extensions#tabline#left_alt_sep = '|'

" Plugin 'ervandew/supertab'
" let g:SuperTabDefaultCompletionType="context"



""""" Vim colorschemes
Plugin 'rakr/vim-one'
Plugin 'joshdick/onedark.vim'
Plugin 'upsuper/vim-colorschemes'

" vim-color-gruvbox
" ---------------------------------------------------
Plugin 'morhetz/gruvbox'
" let g:gruvbox_contrast_dark = 'soft'



Plugin 'tmhedberg/SimpylFold'
Plugin 'ternjs/tern_for_vim'

Plugin 'jlanzarotta/bufexplorer'
" Plugin 'jeetsukumaran/vim-buffergator'
" Plugin 'vim-airline/vim-airline'
" Plugin 'vim-airline/vim-airline-themes'
" Plugin 'Lokaltog/vim-powerline'
Plugin 'powerline/powerline'
Plugin 'powerline/fonts'
Plugin 'chrisbra/NrrwRgn'
Plugin 'tpope/vim-commentary'
Plugin 'terryma/vim-multiple-cursors'
" Plugin 'dhruvasagar/vim-table-mode'
Plugin 'davidhalter/jedi'
Plugin 'milkbikis/powerline-shell'

Plugin 'MattesGroeger/vim-bookmarks'
" let g:bookmark_no_default_key_mappings = 1
" highlight BookmarkSign ctermbg=NONE ctermfg=160
" highlight BookmarkLine ctermbg=194 ctermfg=NONE
" let g:bookmark_sign = '♥'
let g:bookmark_sign = '♥'
let g:bookmark_highlight_lines = 1
let g:bookmark_disable_ctrlp = 1
let g:bookmark_auto_save = 1
let g:bookmark_annotation_sign = '>>'
let g:bookmark_auto_close = 1




set cursorline
set wrap


"" git status
Plugin 'airblade/vim-gitgutter'
nnoremap <unique> <leader>gt :GitGutterToggle<CR>
"" show buffer
Plugin 'bling/vim-bufferline'

"" python IDE
Plugin 'ivanov/vim-ipython'
""""for nvim
"""Plugin 'bfredl/nvim-ipy'


" vim:ts=4:sw=4:sts=4 et fdm=marker:


" if has("cscope")
"     set cscopetag
"     set csto=1
" endif




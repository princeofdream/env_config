# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
case $- in
    *i*) ;;
      *) return;;
esac

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
ret_shopt=0
shopt > /dev/null 2>/dev/null
ret_shopt=$?
if [[ $ret_shopt -eq 0 ]]; then
	shopt -s histappend
fi

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
if [[ $ret_shopt -eq 0 ]]; then
	shopt -s checkwinsize
fi

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
#[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
#force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	# We have color support; assume it's compliant with Ecma-48
	# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
	# a case would tend to support setf rather than setaf.)
	color_prompt=yes
    else
	color_prompt=
    fi
fi

if [ "$color_prompt" = yes ]; then
    PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
else
    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
	alias dir='dir --color=auto'
	alias vdir='vdir --color=auto'

	alias grep='grep --color=auto'
	alias fgrep='fgrep --color=auto'
	alias egrep='egrep --color=auto'
fi

# colored GCC warnings and errors
#export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'

# some more ls aliases
alias ll='ls -l'
#alias la='ls -A'
alias l='ls -CF'

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if [[ $ret_shopt -eq 0 ]]; then
	if ! shopt -oq posix; then
	  if [ -f /usr/share/bash-completion/bash_completion ]; then
		. /usr/share/bash-completion/bash_completion
	  elif [ -f /etc/bash_completion ]; then
		. /etc/bash_completion
	  fi
	fi
fi



if [[ -f $HOME/.bashrc-extern.sh ]]; then
	source $HOME/.bashrc-extern.sh
else
	SYSTEM_TYPE=`uname`
	GIT_PS1_STAT=`__git_ps1 "%s" >/dev/null 2>/dev/null`
	git_ps_ret=$?

	if [[ ${SYSTEM_TYPE}"" == MSYS* || ${SYSTEM_TYPE}"" == MINGW* ]]
	then
		PS1='\u@\h:\[\033[01;36m\]\w\[\033[00m\] \$\[\033[01;32m\] \[\033[00m\]\n'
	elif [[ ${git_ps_ret} == 0 ]]; then
		PS1='\u@\h:\[\033[01;36m\]\w\[\033[00m\] \$\[\033[01;32m\]$(__git_ps1 " (%s)") \[\033[00m\]\n'
	else
		PS1='\u@\h:\[\033[01;36m\]\w\[\033[00m\] \$\[\033[01;32m\] \[\033[00m\]\n'
	fi
	############# #Tmux Environment ##################
	if [ -n $TMUX ]; then
		if [ ! -z $TMUX ]; then
			PS1="$PS1"'$(tmux setenv TMUXPWD_$(tmux display -p "#D" | tr -d %) "$PWD")'
		fi
	fi
fi

[ -f ~/.fzf.bash ] && source ~/.fzf.bash
[[ -s $HOME/.autojump/etc/profile.d/autojump.sh ]] && source $HOME/.autojump/etc/profile.d/autojump.sh


if [ -f "/etc/bash_completion.d/git-prompt" ]
then
	source /etc/bash_completion.d/git-prompt
else
	if [ -f "/etc/bash_completion.d/git" ]
	then
		source /etc/bash_completion.d/git
	fi
	if [ -f "/usr/share/git-core/contrib/completion/git-prompt.sh" ]
	then
		source /usr/share/git-core/contrib/completion/git-prompt.sh
	fi
fi

umask 0022

# export GTK_IM_MODULE=ibus
# export XMODIFIERS=@im=ibus
# export QT_IM_MODULE=ibus
export GTK_IM_MODULE=fcitx
export QT_IM_MODULE=fcitx
export XMODIFIERS=@im=fcitx
export SDL_IM_MODULE=fcitx

if [[ -f $HOME/.cargo/env ]]; then
    source $HOME/.cargo/env
fi

if [[ -f $HOME/.local/bin/virtualenvwrapper.sh ]]; then
    source $HOME/.local/bin/virtualenvwrapper.sh
fi

if [[ -f $HOME/.bashrc-custom ]]; then
    source $HOME/.bashrc-custom
fi

export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion
